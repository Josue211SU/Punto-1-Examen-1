#include "BluetoothSerial.h"
#include <ESP32Servo.h>

#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth no estÃ¡ habilitado! Por favor, revisa tu configuraciÃ³n.
#endif

BluetoothSerial SerialBT;
const char* deviceName = "Carrito_Mono_2";

// Pines de los servos
#define SERVO_IZQ 12  
#define SERVO_DER 13  

Servo servoIzq;
Servo servoDer;

// PWM para servos MG90S 360Â°
const int DUTY_AVANZA = 2000;
const int DUTY_RETROCEDE = 1000;
const int DUTY_DETENER = 1500;

// Velocidad mÃ¡xima y zona muerta
const float MAX_VEL_RAD_S = 10.0;
const float ZONA_MUERTA = 0.5;

// FunciÃ³n mejorada de velocidad a PWM
int velocidadToPWM(float velocidad) {
    velocidad = constrain(velocidad, -MAX_VEL_RAD_S, MAX_VEL_RAD_S);
    
    if (abs(velocidad) < ZONA_MUERTA) {
        return DUTY_DETENER;  // Ahora sÃ­ se detiene completamente
    }

    // InterpolaciÃ³n lineal
    float pwm = map(velocidad, -MAX_VEL_RAD_S, MAX_VEL_RAD_S, DUTY_RETROCEDE, DUTY_AVANZA);
    return round(pwm);
}

void setup() {
    Serial.begin(115200);
    SerialBT.begin(deviceName);
    Serial.println("âœ… Bluetooth listo. Esperando conexiÃ³n...");

    servoIzq.attach(SERVO_IZQ);
    servoDer.attach(SERVO_DER);

    detener_motores();
}

void loop() {
    if (SerialBT.available()) {
        String data = SerialBT.readStringUntil('\n');
        Serial.print("ðŸ“© Recibido: ");
        Serial.println(data);
        
        if (data.startsWith("SPEED,")) {
            processCommand(data);
        }

        SerialBT.println("âœ… ESP32 recibiÃ³: " + data);
    }
}

void processCommand(String command) {
    command.trim();
    command.replace("SPEED,", "");

    int commaIndex = command.indexOf(',');
    if (commaIndex > 0) {
        float wi = command.substring(0, commaIndex).toFloat();
        float wd = command.substring(commaIndex + 1).toFloat();

        // âœ… Ya no se fuerza a Â±2 rad/s, se deja en 0
        if (abs(wi) < ZONA_MUERTA) wi = 0;
        if (abs(wd) < ZONA_MUERTA) wd = 0;

        Serial.print("âš™ Aplicando velocidades -> wi: ");
        Serial.print(wi);
        Serial.print(", wd: ");
        Serial.println(wd);

        int pwmIzq = velocidadToPWM(wi);
        int pwmDer = velocidadToPWM(wd);

        pwmDer = 3000 - pwmDer;  // Invertir direcciÃ³n si es necesario

        servoIzq.writeMicroseconds(pwmIzq);
        servoDer.writeMicroseconds(pwmDer);

        Serial.print("ðŸŽ› PWM Izq: ");
        Serial.print(pwmIzq);
        Serial.print(" | PWM Der (invertido): ");
        Serial.println(pwmDer);
    }
}

void detener_motores() {
    servoIzq.writeMicroseconds(DUTY_DETENER);
    servoDer.writeMicroseconds(DUTY_DETENER);
}
