#include "BluetoothSerial.h"
#include <ESP32Servo.h>

#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth no est√° habilitado! Por favor, revisa tu configuraci√≥n.
#endif

BluetoothSerial SerialBT;
const char* deviceName = "Carrito_Mono_2";

// Definici√≥n de pines para los servos
#define SERVO_IZQ 12  
#define SERVO_DER 13  

Servo servoIzq;
Servo servoDer;

// Valores de PWM para control de servos
const int DUTY_AVANZA = 2000;
const int DUTY_RETROCEDE = 1000;
const int DUTY_DETENER = 1500;

// Par√°metros de velocidad
const float MAX_VEL_RAD_S = 10.0;
const float ZONA_MUERTA = 0.5;

// Funci√≥n para convertir velocidad a se√±al PWM
int velocidadToPWM(float velocidad) {
    velocidad = constrain(velocidad, -MAX_VEL_RAD_S, MAX_VEL_RAD_S);
    
    if (abs(velocidad) < ZONA_MUERTA) {
        return DUTY_DETENER;
    }
    
    float pwm = map(velocidad, -MAX_VEL_RAD_S, MAX_VEL_RAD_S, DUTY_RETROCEDE, DUTY_AVANZA);
    return round(pwm);
}

void setup() {
    Serial.begin(115200);
    SerialBT.begin(deviceName);
    Serial.println("‚úÖ Bluetooth listo. Esperando conexi√≥n...");

    servoIzq.attach(SERVO_IZQ);
    servoDer.attach(SERVO_DER);

    detener_motores();
}

void loop() {
    if (SerialBT.available()) {
        String data = SerialBT.readStringUntil('\n');
        Serial.print("üì© Recibido: ");
        Serial.println(data);

        processCommand(data);

        SerialBT.println("‚úÖ ESP32 recibi√≥: " + data);
    }
}

// Procesamiento del comando recibido
void processCommand(String command) {
    command.trim();
    
    int commaIndex = command.indexOf(',');
    if (commaIndex > 0) {
        float wi = command.substring(0, commaIndex).toFloat();
        float wd = command.substring(commaIndex + 1).toFloat();

        if (abs(wi) < ZONA_MUERTA) wi = 0;
        if (abs(wd) < ZONA_MUERTA) wd = 0;

        Serial.print("‚öô Aplicando velocidades -> wi: ");
        Serial.print(wi);
        Serial.print(", wd: ");
        Serial.println(wd);

        int pwmIzq = velocidadToPWM(wi);
        int pwmDer = velocidadToPWM(wd);

        pwmDer = 3000 - pwmDer;

        servoIzq.writeMicroseconds(pwmIzq);
        servoDer.writeMicroseconds(pwmDer);

        Serial.print("üéõ PWM Izq: ");
        Serial.print(pwmIzq);
        Serial.print(" | PWM Der (invertido): ");
        Serial.println(pwmDer);
    }
}

// Funci√≥n para detener los motores
void detener_motores() {
    servoIzq.writeMicroseconds(DUTY_DETENER);
    servoDer.writeMicroseconds(DUTY_DETENER);
}
